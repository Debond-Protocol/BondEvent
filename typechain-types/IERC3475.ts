/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IERC3475 {
  export type TransactionStruct = {
    classId: PromiseOrValue<BigNumberish>;
    nonceId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type TransactionStructOutput = [BigNumber, BigNumber, BigNumber] & {
    classId: BigNumber;
    nonceId: BigNumber;
    amount: BigNumber;
  };

  export type MetadataStruct = {
    title: PromiseOrValue<string>;
    _type: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
  };

  export type MetadataStructOutput = [string, string, string] & {
    title: string;
    _type: string;
    description: string;
  };

  export type ValuesStruct = {
    stringValue: PromiseOrValue<string>;
    uintValue: PromiseOrValue<BigNumberish>;
    addressValue: PromiseOrValue<string>;
    boolValue: PromiseOrValue<boolean>;
  };

  export type ValuesStructOutput = [string, BigNumber, string, boolean] & {
    stringValue: string;
    uintValue: BigNumber;
    addressValue: string;
    boolValue: boolean;
  };
}

export interface IERC3475Interface extends utils.Interface {
  functions: {
    "activeSupply(uint256,uint256)": FunctionFragment;
    "allowance(address,address,uint256,uint256)": FunctionFragment;
    "approve(address,(uint256,uint256,uint256)[])": FunctionFragment;
    "balanceOf(address,uint256,uint256)": FunctionFragment;
    "burn(address,(uint256,uint256,uint256)[])": FunctionFragment;
    "burnedSupply(uint256,uint256)": FunctionFragment;
    "classMetadata(uint256)": FunctionFragment;
    "classValues(uint256,uint256)": FunctionFragment;
    "getProgress(uint256,uint256)": FunctionFragment;
    "isApprovedFor(address,address)": FunctionFragment;
    "issue(address,(uint256,uint256,uint256)[])": FunctionFragment;
    "nonceMetadata(uint256,uint256)": FunctionFragment;
    "nonceValues(uint256,uint256,uint256)": FunctionFragment;
    "redeem(address,(uint256,uint256,uint256)[])": FunctionFragment;
    "redeemedSupply(uint256,uint256)": FunctionFragment;
    "setApprovalFor(address,bool)": FunctionFragment;
    "totalSupply(uint256,uint256)": FunctionFragment;
    "transferAllowanceFrom(address,address,(uint256,uint256,uint256)[])": FunctionFragment;
    "transferFrom(address,address,(uint256,uint256,uint256)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeSupply"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "burnedSupply"
      | "classMetadata"
      | "classValues"
      | "getProgress"
      | "isApprovedFor"
      | "issue"
      | "nonceMetadata"
      | "nonceValues"
      | "redeem"
      | "redeemedSupply"
      | "setApprovalFor"
      | "totalSupply"
      | "transferAllowanceFrom"
      | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeSupply",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, IERC3475.TransactionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<string>, IERC3475.TransactionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnedSupply",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "classMetadata",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "classValues",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProgress",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedFor",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [PromiseOrValue<string>, IERC3475.TransactionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceMetadata",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceValues",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<string>, IERC3475.TransactionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemedSupply",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalFor",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllowanceFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      IERC3475.TransactionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      IERC3475.TransactionStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "classMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "classValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonceMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonceValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAllowanceFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalFor(address,address,bool)": EventFragment;
    "Burn(address,address,tuple[])": EventFragment;
    "Issue(address,address,tuple[])": EventFragment;
    "Redeem(address,address,tuple[])": EventFragment;
    "Transfer(address,address,address,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalFor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Issue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalForEventObject {
  _owner: string;
  _operator: string;
  _approved: boolean;
}
export type ApprovalForEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForEventObject
>;

export type ApprovalForEventFilter = TypedEventFilter<ApprovalForEvent>;

export interface BurnEventObject {
  _operator: string;
  _from: string;
  _transactions: IERC3475.TransactionStructOutput[];
}
export type BurnEvent = TypedEvent<
  [string, string, IERC3475.TransactionStructOutput[]],
  BurnEventObject
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface IssueEventObject {
  _operator: string;
  _to: string;
  _transactions: IERC3475.TransactionStructOutput[];
}
export type IssueEvent = TypedEvent<
  [string, string, IERC3475.TransactionStructOutput[]],
  IssueEventObject
>;

export type IssueEventFilter = TypedEventFilter<IssueEvent>;

export interface RedeemEventObject {
  _operator: string;
  _from: string;
  _transactions: IERC3475.TransactionStructOutput[];
}
export type RedeemEvent = TypedEvent<
  [string, string, IERC3475.TransactionStructOutput[]],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface TransferEventObject {
  _operator: string;
  _from: string;
  _to: string;
  _transactions: IERC3475.TransactionStructOutput[];
}
export type TransferEvent = TypedEvent<
  [string, string, string, IERC3475.TransactionStructOutput[]],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface IERC3475 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC3475Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      _spender: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _account: PromiseOrValue<string>,
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      _from: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnedSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    classMetadata(
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IERC3475.MetadataStructOutput]>;

    classValues(
      _classId: PromiseOrValue<BigNumberish>,
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IERC3475.ValuesStructOutput]>;

    getProgress(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        progressAchieved: BigNumber;
        progressRemaining: BigNumber;
      }
    >;

    isApprovedFor(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issue(
      _to: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonceMetadata(
      _classId: PromiseOrValue<BigNumberish>,
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IERC3475.MetadataStructOutput]>;

    nonceValues(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IERC3475.ValuesStructOutput]>;

    redeem(
      _from: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemedSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setApprovalFor(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferAllowanceFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activeSupply(
    _classId: PromiseOrValue<BigNumberish>,
    _nonceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowance(
    _owner: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _classId: PromiseOrValue<BigNumberish>,
    _nonceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _spender: PromiseOrValue<string>,
    _transactions: IERC3475.TransactionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    _account: PromiseOrValue<string>,
    _classId: PromiseOrValue<BigNumberish>,
    _nonceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    _from: PromiseOrValue<string>,
    _transactions: IERC3475.TransactionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnedSupply(
    _classId: PromiseOrValue<BigNumberish>,
    _nonceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  classMetadata(
    _metadataId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IERC3475.MetadataStructOutput>;

  classValues(
    _classId: PromiseOrValue<BigNumberish>,
    _metadataId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IERC3475.ValuesStructOutput>;

  getProgress(
    _classId: PromiseOrValue<BigNumberish>,
    _nonceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      progressAchieved: BigNumber;
      progressRemaining: BigNumber;
    }
  >;

  isApprovedFor(
    _owner: PromiseOrValue<string>,
    _operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issue(
    _to: PromiseOrValue<string>,
    _transactions: IERC3475.TransactionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonceMetadata(
    _classId: PromiseOrValue<BigNumberish>,
    _metadataId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IERC3475.MetadataStructOutput>;

  nonceValues(
    _classId: PromiseOrValue<BigNumberish>,
    _nonceId: PromiseOrValue<BigNumberish>,
    _metadataId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IERC3475.ValuesStructOutput>;

  redeem(
    _from: PromiseOrValue<string>,
    _transactions: IERC3475.TransactionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemedSupply(
    _classId: PromiseOrValue<BigNumberish>,
    _nonceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setApprovalFor(
    _operator: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(
    _classId: PromiseOrValue<BigNumberish>,
    _nonceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferAllowanceFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _transactions: IERC3475.TransactionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _transactions: IERC3475.TransactionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      _account: PromiseOrValue<string>,
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      _from: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    burnedSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    classMetadata(
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IERC3475.MetadataStructOutput>;

    classValues(
      _classId: PromiseOrValue<BigNumberish>,
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IERC3475.ValuesStructOutput>;

    getProgress(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        progressAchieved: BigNumber;
        progressRemaining: BigNumber;
      }
    >;

    isApprovedFor(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issue(
      _to: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    nonceMetadata(
      _classId: PromiseOrValue<BigNumberish>,
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IERC3475.MetadataStructOutput>;

    nonceValues(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IERC3475.ValuesStructOutput>;

    redeem(
      _from: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    redeemedSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalFor(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAllowanceFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovalFor(address,address,bool)"(
      _owner?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _approved?: null
    ): ApprovalForEventFilter;
    ApprovalFor(
      _owner?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _approved?: null
    ): ApprovalForEventFilter;

    "Burn(address,address,tuple[])"(
      _operator?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _transactions?: null
    ): BurnEventFilter;
    Burn(
      _operator?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _transactions?: null
    ): BurnEventFilter;

    "Issue(address,address,tuple[])"(
      _operator?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _transactions?: null
    ): IssueEventFilter;
    Issue(
      _operator?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _transactions?: null
    ): IssueEventFilter;

    "Redeem(address,address,tuple[])"(
      _operator?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _transactions?: null
    ): RedeemEventFilter;
    Redeem(
      _operator?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _transactions?: null
    ): RedeemEventFilter;

    "Transfer(address,address,address,tuple[])"(
      _operator?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _transactions?: null
    ): TransferEventFilter;
    Transfer(
      _operator?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _transactions?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    activeSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      _account: PromiseOrValue<string>,
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      _from: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnedSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    classMetadata(
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    classValues(
      _classId: PromiseOrValue<BigNumberish>,
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProgress(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedFor(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      _to: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonceMetadata(
      _classId: PromiseOrValue<BigNumberish>,
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonceValues(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _from: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemedSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalFor(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAllowanceFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _account: PromiseOrValue<string>,
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _from: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnedSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    classMetadata(
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    classValues(
      _classId: PromiseOrValue<BigNumberish>,
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProgress(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedFor(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      _to: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonceMetadata(
      _classId: PromiseOrValue<BigNumberish>,
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonceValues(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      _metadataId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      _from: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemedSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovalFor(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(
      _classId: PromiseOrValue<BigNumberish>,
      _nonceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAllowanceFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _transactions: IERC3475.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
